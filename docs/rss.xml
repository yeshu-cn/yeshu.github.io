<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>yeshu's blog</title><link>https://yeshu.fun/yeshu.github.io</link><description>听歌写代码.</description><copyright>yeshu's blog</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.com/yeshu-cn/yeshu.github.io/blob/main/icon.png?raw=true</url><title>avatar</title><link>https://yeshu.fun/yeshu.github.io</link></image><lastBuildDate>Tue, 30 Jan 2024 08:09:17 +0000</lastBuildDate><managingEditor>yeshu's blog</managingEditor><pubDate>Tue, 30 Jan 2024 08:09:17 +0000</pubDate><ttl>60</ttl><webMaster>yeshu's blog</webMaster><item><title>Flutter MediaQuery实现字体大小的调整</title><link>https://yeshu.fun/yeshu.github.io/post/Flutter%20MediaQuery-shi-xian-zi-ti-da-xiao-de-diao-zheng.html</link><description>```dart&#13;
void main() =&gt; runApp(MyApp());&#13;
&#13;
class MyApp extends StatelessWidget {&#13;
  @override&#13;
  Widget build(BuildContext context) {&#13;
    return MaterialApp(&#13;
      title: 'Flutter Demo',&#13;
      theme: ThemeData(&#13;
        primarySwatch: Colors.blue,&#13;
      ),&#13;
      builder: (context, child) {&#13;
        return MediaQuery(&#13;
          data: MediaQuery.of(context).copyWith(textScaler: TextScaler.linear(1.5)),&#13;
          child: child,&#13;
        );&#13;
      },&#13;
      home: MyHomePage(),&#13;
    );&#13;
  }&#13;
}&#13;
&#13;
```&#13;
&#13;
`MediaQuery` 在 Flutter 中扮演着非常关键的角色，它提供了关于当前媒体（例如屏幕或窗口）的信息，这些信息对于构建响应式 UI 非常重要。</description><guid isPermaLink="true">https://yeshu.fun/yeshu.github.io/post/Flutter%20MediaQuery-shi-xian-zi-ti-da-xiao-de-diao-zheng.html</guid><pubDate>Tue, 30 Jan 2024 08:08:53 +0000</pubDate></item><item><title>Flutter中TextEditorController等占用了系统资源等代码，需要手动释放资源，不能依赖GC</title><link>https://yeshu.fun/yeshu.github.io/post/Flutter-zhong-TextEditorController-deng-zhan-yong-le-xi-tong-zi-yuan-deng-dai-ma-%EF%BC%8C-xu-yao-shou-dong-shi-fang-zi-yuan-%EF%BC%8C-bu-neng-yi-lai-GC.html</link><description>```dart&#13;
class _FeedbackPageState extends State&lt;FeedbackPage&gt; {&#13;
  final TextEditingController _contentController = TextEditingController();&#13;
  final TextEditingController _contactController = TextEditingController();&#13;
&#13;
&#13;
  @override&#13;
  void dispose() {&#13;
    _contentController.dispose();&#13;
    _contactController.dispose();&#13;
    super.dispose();&#13;
  }&#13;
}&#13;
&#13;
```&#13;
在Dart（Flutter使用的语言）中，对象的生命周期是由垃圾收集器（GC）管理的。</description><guid isPermaLink="true">https://yeshu.fun/yeshu.github.io/post/Flutter-zhong-TextEditorController-deng-zhan-yong-le-xi-tong-zi-yuan-deng-dai-ma-%EF%BC%8C-xu-yao-shou-dong-shi-fang-zi-yuan-%EF%BC%8C-bu-neng-yi-lai-GC.html</guid><pubDate>Fri, 12 Jan 2024 06:54:51 +0000</pubDate></item><item><title>Flutter中的Widget和State生命周期</title><link>https://yeshu.fun/yeshu.github.io/post/Flutter-zhong-de-Widget-he-State-sheng-ming-zhou-qi.html</link><description># Flutter中的Widget和State生命周期&#13;
&#13;
在Flutter中，理解Widget和State的生命周期是非常重要的。</description><guid isPermaLink="true">https://yeshu.fun/yeshu.github.io/post/Flutter-zhong-de-Widget-he-State-sheng-ming-zhou-qi.html</guid><pubDate>Thu, 11 Jan 2024 03:49:10 +0000</pubDate></item><item><title>什么是异常</title><link>https://yeshu.fun/yeshu.github.io/post/shen-me-shi-yi-chang.html</link><description>异常是不可控且和我们职责无关的才是事情，例如网线被挖断了，硬盘坏了，地球炸了。</description><guid isPermaLink="true">https://yeshu.fun/yeshu.github.io/post/shen-me-shi-yi-chang.html</guid><pubDate>Fri, 22 Dec 2023 09:16:58 +0000</pubDate></item><item><title>Material Design 3 Color System</title><link>https://yeshu.fun/yeshu.github.io/post/Material%20Design%203%20Color%20System.html</link><description>Flutter中如何使用Material Design 3的Color system&#13;
&#13;
概念&#13;
* Color role： 颜色主题中定义的颜色名称，M3中有26+的color roles&#13;
* Dynamic color： 从手机壁纸中获取的主题色（只有Android 12才支持）或者从图片内容中获取的主题色，注意主题色是指一个单一的颜色&#13;
* Static color： 用户自己定义的颜色常量&#13;
* Baseline color： 就是系统默认的颜色主题&#13;
&#13;
动态主题  &#13;
1. 从壁纸或者图片内容中获取一个单一的颜色&#13;
2. 通过算法根据生成的颜色再次获取5个颜色：Primary,Secondary,Tertiary,Neutral,Neutral variant&#13;
3. 生成上面5个颜色对应的调色板（tonal palette）&#13;
4. 然后选择调色板中不同色调的颜色生成完整的Light ColorScheme和Dark ColorScheme,这里面的原理是通过调色板中不同对比度来选择颜色配对color role, 可以有Standard, Medium, High三个档位的对比度&#13;
&#13;
官方链接&#13;
https://m3.material.io/styles/color/system/overview&#13;
![light](https://github.com/yeshu-cn/yeshu.github.io/assets/3785459/86f4ec22-7601-4750-8b44-0d067cb13730)&#13;
&#13;
demo:https://github.com/yeshu-cn/flutterdemo&#13;
&#13;
&#13;
&#13;
。</description><guid isPermaLink="true">https://yeshu.fun/yeshu.github.io/post/Material%20Design%203%20Color%20System.html</guid><pubDate>Thu, 21 Dec 2023 04:12:29 +0000</pubDate></item><item><title>BoxFit.contain缩放效果实现</title><link>https://yeshu.fun/yeshu.github.io/post/BoxFit.contain-suo-fang-xiao-guo-shi-xian.html</link><description>实现svg图片显示时的BoxFit.contain效果&#13;
```dart&#13;
  Path getClip(Size size) {&#13;
    var path = parseSvgPathData(svgPath);&#13;
    // 计算宽度和高度的缩放因子&#13;
    double widthScaleFactor = size.width / svgSize.width;&#13;
    double heightScaleFactor = size.height / svgSize.height;&#13;
&#13;
    // 选择较小的缩放因子&#13;
    double scaleFactor = min(widthScaleFactor, heightScaleFactor);&#13;
&#13;
    final Matrix4 matrix4 = Matrix4.identity();&#13;
    matrix4.scale(scaleFactor, scaleFactor);&#13;
&#13;
    // 可选 - 计算居中的偏移量&#13;
    double dx = (size.width - svgSize.width * scaleFactor) / 2;&#13;
    double dy = (size.height - svgSize.height * scaleFactor) / 2;&#13;
&#13;
    return path.transform(matrix4.storage).shift(Offset(dx, dy));&#13;
  }&#13;
```。</description><guid isPermaLink="true">https://yeshu.fun/yeshu.github.io/post/BoxFit.contain-suo-fang-xiao-guo-shi-xian.html</guid><pubDate>Fri, 08 Dec 2023 02:47:43 +0000</pubDate></item><item><title>haha</title><link>https://yeshu.fun/yeshu.github.io/post/haha.html</link><description>haha。</description><guid isPermaLink="true">https://yeshu.fun/yeshu.github.io/post/haha.html</guid><pubDate>Thu, 07 Dec 2023 10:22:20 +0000</pubDate></item></channel></rss>